<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Carbon\Carbon;
use Illuminate\Support\Facades\App;

class PaymentController extends Controller
{
    function generateSignature() {
        return "no";
    }

    public function preparePaymentData(Request $r)
    {

        if ($r->payment_method != 'letter') {

            $requestData = $r->all();
            $invoice = 'INV' . mt_rand(100000, 200000);
            $clientId = env('DOKU_CLIENT_ID');

            $dokuApi = env('DOKU_API');

            $requestDate = Carbon::now()->setTimezone('Asia/Bangkok')->toIso8601ZuluString();
            $requestTarget = "/checkout/v1/payment";

            $body = $this->prepareBody($invoice, $requestData);
            $signature = $this->createSignature($body, $invoice, $clientId, $requestDate, $requestTarget);

            $headers = $this->createHeader($invoice, $clientId, $requestDate, $signature);

            return response()->json([
                'headers' => $headers,
                'body' => $body,
                'signature' => $signature, 
                'dokuApi' => $dokuApi, 
            ]);
        } else {

            $request = Request::create(route('store_registration'), 'POST', $r->all());
            $response = App::handle($request);

            return $response;
        }
    }

    private function createHeader($invoice, $clientId, $requestDate, $signature)
    {
        return [
            "Content-Type" => "application/json",
            "Signature" => 'HMACSHA256=' . $signature,
            "Request-Id" => $invoice,
            "Client-Id" => $clientId,
            "Request-Timestamp" => $requestDate,
        ];
    }
    private function prepareBody($invoice, $r)
    {

        $activityMapping = [
            'local' => [
                'activity_1' => ['Day 1 SessionInc. Opening Ceremony + TC Open Meeting  - Local Participant', 2000000],
                'activity_2' => ['Day 1 Half Day Session - Local Participant', 1000000],
                'activity_3' => ['Day 2 Session - Local Participant', 2000000],
                'activity_4' => ['2 Days Package include Opening Ceremony and TC Open Meeting - Local Participant', 3750000],
                'activity_5' => ['Halal Awareness by IHATEC + Attendance certificate - Local Participant', 2600000],
                'activity_6' => ['2 days GDPMD CDAKB for Technical Responsible Person + Certificate by Ministry of Health Republic of Indonesia', 4000000],
                'activity_7' => ['Gala Dinner - Local Participant', 750000],
            ],
            'foreign' => [
                'activity_1' => ['Day 1 Session Inc. Opening Ceremony + TC Open Meeting   - Foreign Participant', 250],
                'activity_2' => ['Day 1 Half Day Session - Foreign Participant', 125],
                'activity_3' => ['Day 2 Session - Foreign Participant', 250],
                'activity_4' => ['2 Days Package include Opening Ceremony and TC Open Meeting - Foreign Participant', 500],
                'activity_5' => ['Halal Awareness by IHATEC + Attendance certificate - Foreign Participant', 250],
                'activity_7' => ['Gala Dinner - Foreign Participant', 100],
            ],
        ];

        $lineItems = [];

        foreach ($r as $key => $value) {
            if (strpos($key, 'activity_') === 0 && isset($activityMapping[$value][$key])) {
                $selectedOption = $activityMapping[$value][$key];
                $item_name = $selectedOption[0];
                $item_price = $selectedOption[1];
                $lineItems[] = [
                    "name" => $item_name,
                    "price" => $item_price,
                    "quantity" => 1,
                ];
            }
        }

        if ($r['payment_method'] == 'doku') {
            $lineItems[] = [
                "name" => "Admin Fee",
                "price" =>  round($r['fee'], 0, PHP_ROUND_HALF_UP),
                "quantity" => 1,
            ];
        }
        if ($r['payment_method'] == 'transfer') {
            $lineItems[] = [
                "name" => "Admin Fee",
                "price" =>  4000,
                "quantity" => 1,
            ];
        }

        $order_amount = round($r['total'], 0, PHP_ROUND_HALF_UP); 
        $order_callback_url = 'https://doku.com';

        $body = [
            "customer" => [
                "address" => $r['address'],
                "country" => "ID",
                "email" => $r['email'],
                "name" => $r['name'],
                "phone" => preg_replace('/[^0-9]/', '', $r['phone']),
            ],
            "order" => [
                "amount" => $order_amount,
                "callback_url" => $order_callback_url,
                "currency" => $r['currency'],
                "invoice_number" => $invoice,
                "line_items" => $lineItems,
                "session_id" => $this->makeSession(32),
            ],
            "payment" => [
                "payment_due_date" => 60,
            ]
        ];
        // Adjust payment_method_types based on the selected payment method
        if ($r['payment_method'] == 'transfer') {
            $body["payment"]["payment_method_types"] = [
                "ONLINE_TO_OFFLINE_ALFA",
                "VIRTUAL_ACCOUNT_BCA",
                "DIRECT_DEBIT_BRI",
                "QRIS",
                "VIRTUAL_ACCOUNT_BANK_PERMATA",
                "PEER_TO_PEER_KREDIVO",
                "EMONEY_OVO",
                "VIRTUAL_ACCOUNT_BANK_DANAMON",
                "PEER_TO_PEER_INDODANA",
                "PEER_TO_PEER_AKULAKU",
                "VIRTUAL_ACCOUNT_BANK_CIMB",
                "VIRTUAL_ACCOUNT_BANK_MANDIRI",
                "VIRTUAL_ACCOUNT_DOKU",
                "VIRTUAL_ACCOUNT_BNI",
                "VIRTUAL_ACCOUNT_BRI",
                "VIRTUAL_ACCOUNT_BANK_SYARIAH_MANDIRI"
            ];
        } else if ($r['payment_method'] == 'doku') {
            $body["payment"]["payment_method_types"] = [
                "CREDIT_CARD",
            ];
        }
        return $body;
    }

    private function makeSession($length)
    {
        $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        $charactersLength = strlen($characters);
        $result = '';

        for ($i = 0; $i < $length; $i++) {
            $result .= $characters[rand(0, $charactersLength - 1)];
        }

        return $result;
    }

    private function createSignature($body, $invoice, $clientId, $requestDate, $requestTarget)
    {
        $digest = base64_encode(hash('sha256', json_encode($body), true));
        $rawSignature = $this->consumeDigest($digest, $clientId, $invoice, $requestDate, $requestTarget);
        $key = env('DOKU_CLIENT_SECRET');

        return base64_encode(hash_hmac('sha256', $rawSignature, $key, true));
    }

    private function consumeDigest($digest, $clientId, $invoice, $requestDate, $requestTarget)
    {
        $processedDigest =
            "Client-Id:" . $clientId . "\n"
            . "Request-Id:" . $invoice . "\n"
            . "Request-Timestamp:" . $requestDate . "\n"
            . "Request-Target:" . $requestTarget . "\n"
            . "Digest:" . $digest;

        return $processedDigest;
    }

    private function createSignature2($body, $invoice, $clientId, $requestDate, $requestTarget)
    {

        $digest = base64_encode(hash('sha256', json_encode($body), true));

        $signatureComponents =
            "Client-Id:" . $clientId . "\n" .
            "Request-Id:" . $invoice . "\n" .
            "Request-Timestamp:" . $requestDate . "\n" .
            "Request-Target:" . $requestTarget . "\n" .
            "Digest:" . $digest;

        $key = env('DOKU_CLIENT_SECRET');

        $rawSignature = hash_hmac('sha256', $signatureComponents, $key, true);

        $encodedSignature = base64_encode($rawSignature);

        return $encodedSignature;
    }

}